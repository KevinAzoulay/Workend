const Task = require('../taskModel')
const User = require('../userModel')

//Creates a task Obj based of the task Schema and puts of the taskObj info 
//from the req obj into the new task and at the end saves the new task.

//Add a task function, recives a taskObj, creates a JS object with new task() based off the taskSchema,
//the data is inserted to the newtask Obj and is saved, after the saving is finished a callback function is fired
// and adds the newtasks ID that was generated by the mongodb server to the user who tasked its tasks array
const addAtask = (taskObj) => {
  return new Promise((resolve, reject) => {
    let newtask = new Task()
    // newUser.username = taskObj.username
    // newUser.password = taskObj.password
    newtask.userid = taskObj.userid
    newtask.title = taskObj.title
    newtask.text = taskObj.text
    newtask.completed = taskObj.completed 
    newtask.date = new Date().getTime()

    newtask.save(async (err) => {
      if (err) {
        reject(err)
      }

      let theUser = await User.findById(newtask.userid)
      theUser.tasks.push(newtask._id)
      User.findByIdAndUpdate(`${newtask.userid}`, theUser).then(() => {
        resolve(`Added task for USERID: ${newtask.userid}, the task ID is ${newtask._id}`)
      })


    })
  })
}

//Sends a query to the DB and 
//returns all docs from the task collection
const getAlltasks = () => {
  return new Promise((resolve, reject) => {
    Task.find({}).then(data => resolve(data)).catch(err => {
      reject(err)
    })
  })
}


//Sends a query to the DB and returns one task with
// that id  from the task collection
const gettaskByID = (id) => {
  return new Promise((resolve, reject) => {
    Task.findById(id)
      .then(data => resolve(data))
      .catch(err => {
        reject(err)
      })
  })
}

//Querys DB with .find and searches for docs with userID equal to the one passed over
//as params
const getAllUserTasks = (id) => 
{
return new Promise((resolve, reject) => {
  Task.find({userid : `${id}`}).then(data => 
    { resolve(data); console.log(data)}).catch( err => { reject(err)} )
})
}

const deletetaskByID = (id) => {
  return new Promise( async (resolve, reject)  => {
    //Save oldtask object before finding and deleteing.
    let oldtask = await Task.findById(id)
    //Find by ID and delete 
    Task.findByIdAndDelete(id)
      .then(async (data) => {
        //Query for the User by using the userID from the oldtask object
        let theUser = await User.findById(oldtask.userid)
        //Filter through the array, removing the oldtask ID
        theUser.tasks = theUser.tasks.filter(taskID => taskID != id )
        //Update UserObj 
        User.findByIdAndUpdate(oldtask.userid, theUser)
          .then(() => resolve("Deleted"))
            .catch(err => reject(err))
      })
  })
}
//Sends a query to the DB and updates
// that id  from the task collection
const updatetaskbyID = (id, taskObj) => {
  return new Promise((resolve, reject) => {
    Task.findByIdAndUpdate(id, taskObj, (err) => {
      if (err) {
        reject(err)
      } else {
        resolve('updated')
      }
    })


  })
}


module.exports = {
  addAtask,
  getAlltasks,
  gettaskByID,
  updatetaskbyID,
  deletetaskByID,
  getAllUserTasks
}